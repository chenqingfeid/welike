package com.redefine.welike.base.dao.welike;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, String.class, "uid", true, "UID");
        public final static Property Nick = new Property(1, String.class, "nick", false, "NICK");
        public final static Property Sex = new Property(2, byte.class, "sex", false, "SEX");
        public final static Property Created = new Property(3, long.class, "created", false, "CREATED");
        public final static Property Head = new Property(4, String.class, "head", false, "HEAD");
        public final static Property AtTime = new Property(5, Long.class, "atTime", false, "AT_TIME");
        public final static Property Vip = new Property(6, Integer.class, "vip", false, "VIP");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"UID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uid
                "\"NICK\" TEXT NOT NULL ," + // 1: nick
                "\"SEX\" INTEGER NOT NULL ," + // 2: sex
                "\"CREATED\" INTEGER NOT NULL ," + // 3: created
                "\"HEAD\" TEXT," + // 4: head
                "\"AT_TIME\" INTEGER," + // 5: atTime
                "\"VIP\" INTEGER);"); // 6: vip
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
        stmt.bindString(2, entity.getNick());
        stmt.bindLong(3, entity.getSex());
        stmt.bindLong(4, entity.getCreated());
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(5, head);
        }
 
        Long atTime = entity.getAtTime();
        if (atTime != null) {
            stmt.bindLong(6, atTime);
        }
 
        Integer vip = entity.getVip();
        if (vip != null) {
            stmt.bindLong(7, vip);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
        stmt.bindString(2, entity.getNick());
        stmt.bindLong(3, entity.getSex());
        stmt.bindLong(4, entity.getCreated());
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(5, head);
        }
 
        Long atTime = entity.getAtTime();
        if (atTime != null) {
            stmt.bindLong(6, atTime);
        }
 
        Integer vip = entity.getVip();
        if (vip != null) {
            stmt.bindLong(7, vip);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uid
            cursor.getString(offset + 1), // nick
            (byte) cursor.getShort(offset + 2), // sex
            cursor.getLong(offset + 3), // created
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // head
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // atTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // vip
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNick(cursor.getString(offset + 1));
        entity.setSex((byte) cursor.getShort(offset + 2));
        entity.setCreated(cursor.getLong(offset + 3));
        entity.setHead(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAtTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setVip(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getUid();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
