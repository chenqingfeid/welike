package com.redefine.welike.base.dao.storage;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPGRADED".
*/
public class UpgradedDao extends AbstractDao<Upgraded, String> {

    public static final String TABLENAME = "UPGRADED";

    /**
     * Properties of entity Upgraded.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UpdateId = new Property(0, String.class, "updateId", true, "UPDATE_ID");
        public final static Property Os = new Property(1, String.class, "os", false, "OS");
        public final static Property UpdateContent = new Property(2, String.class, "updateContent", false, "UPDATE_CONTENT");
        public final static Property Version = new Property(3, String.class, "version", false, "VERSION");
        public final static Property UpdateTitle = new Property(4, String.class, "updateTitle", false, "UPDATE_TITLE");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property UpdateType = new Property(6, int.class, "updateType", false, "UPDATE_TYPE");
    }


    public UpgradedDao(DaoConfig config) {
        super(config);
    }
    
    public UpgradedDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPGRADED\" (" + //
                "\"UPDATE_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: updateId
                "\"OS\" TEXT NOT NULL ," + // 1: os
                "\"UPDATE_CONTENT\" TEXT NOT NULL ," + // 2: updateContent
                "\"VERSION\" TEXT NOT NULL ," + // 3: version
                "\"UPDATE_TITLE\" TEXT NOT NULL ," + // 4: updateTitle
                "\"URL\" TEXT NOT NULL ," + // 5: url
                "\"UPDATE_TYPE\" INTEGER NOT NULL );"); // 6: updateType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPGRADED\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Upgraded entity) {
        stmt.clearBindings();
 
        String updateId = entity.getUpdateId();
        if (updateId != null) {
            stmt.bindString(1, updateId);
        }
        stmt.bindString(2, entity.getOs());
        stmt.bindString(3, entity.getUpdateContent());
        stmt.bindString(4, entity.getVersion());
        stmt.bindString(5, entity.getUpdateTitle());
        stmt.bindString(6, entity.getUrl());
        stmt.bindLong(7, entity.getUpdateType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Upgraded entity) {
        stmt.clearBindings();
 
        String updateId = entity.getUpdateId();
        if (updateId != null) {
            stmt.bindString(1, updateId);
        }
        stmt.bindString(2, entity.getOs());
        stmt.bindString(3, entity.getUpdateContent());
        stmt.bindString(4, entity.getVersion());
        stmt.bindString(5, entity.getUpdateTitle());
        stmt.bindString(6, entity.getUrl());
        stmt.bindLong(7, entity.getUpdateType());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Upgraded readEntity(Cursor cursor, int offset) {
        Upgraded entity = new Upgraded( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // updateId
            cursor.getString(offset + 1), // os
            cursor.getString(offset + 2), // updateContent
            cursor.getString(offset + 3), // version
            cursor.getString(offset + 4), // updateTitle
            cursor.getString(offset + 5), // url
            cursor.getInt(offset + 6) // updateType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Upgraded entity, int offset) {
        entity.setUpdateId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOs(cursor.getString(offset + 1));
        entity.setUpdateContent(cursor.getString(offset + 2));
        entity.setVersion(cursor.getString(offset + 3));
        entity.setUpdateTitle(cursor.getString(offset + 4));
        entity.setUrl(cursor.getString(offset + 5));
        entity.setUpdateType(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Upgraded entity, long rowId) {
        return entity.getUpdateId();
    }
    
    @Override
    public String getKey(Upgraded entity) {
        if(entity != null) {
            return entity.getUpdateId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Upgraded entity) {
        return entity.getUpdateId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
