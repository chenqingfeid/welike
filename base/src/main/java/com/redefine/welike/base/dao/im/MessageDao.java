package com.redefine.welike.base.dao.im;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, String> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Mid = new Property(0, String.class, "mid", true, "MID");
        public final static Property Sid = new Property(1, String.class, "sid", false, "SID");
        public final static Property SessionNick = new Property(2, String.class, "sessionNick", false, "SESSION_NICK");
        public final static Property SessionHead = new Property(3, String.class, "sessionHead", false, "SESSION_HEAD");
        public final static Property SenderUid = new Property(4, String.class, "senderUid", false, "SENDER_UID");
        public final static Property SenderNick = new Property(5, String.class, "senderNick", false, "SENDER_NICK");
        public final static Property SenderHead = new Property(6, String.class, "senderHead", false, "SENDER_HEAD");
        public final static Property SessionType = new Property(7, byte.class, "sessionType", false, "SESSION_TYPE");
        public final static Property Status = new Property(8, byte.class, "status", false, "STATUS");
        public final static Property Time = new Property(9, long.class, "time", false, "TIME");
        public final static Property Type = new Property(10, byte.class, "type", false, "TYPE");
        public final static Property Text = new Property(11, String.class, "text", false, "TEXT");
        public final static Property Thumb = new Property(12, String.class, "thumb", false, "THUMB");
        public final static Property Pic = new Property(13, String.class, "pic", false, "PIC");
        public final static Property Audio = new Property(14, String.class, "audio", false, "AUDIO");
        public final static Property Video = new Property(15, String.class, "video", false, "VIDEO");
        public final static Property FileName = new Property(16, String.class, "fileName", false, "FILE_NAME");
    }


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"MID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: mid
                "\"SID\" TEXT NOT NULL ," + // 1: sid
                "\"SESSION_NICK\" TEXT NOT NULL ," + // 2: sessionNick
                "\"SESSION_HEAD\" TEXT," + // 3: sessionHead
                "\"SENDER_UID\" TEXT NOT NULL ," + // 4: senderUid
                "\"SENDER_NICK\" TEXT NOT NULL ," + // 5: senderNick
                "\"SENDER_HEAD\" TEXT," + // 6: senderHead
                "\"SESSION_TYPE\" INTEGER NOT NULL ," + // 7: sessionType
                "\"STATUS\" INTEGER NOT NULL ," + // 8: status
                "\"TIME\" INTEGER NOT NULL ," + // 9: time
                "\"TYPE\" INTEGER NOT NULL ," + // 10: type
                "\"TEXT\" TEXT," + // 11: text
                "\"THUMB\" TEXT," + // 12: thumb
                "\"PIC\" TEXT," + // 13: pic
                "\"AUDIO\" TEXT," + // 14: audio
                "\"VIDEO\" TEXT," + // 15: video
                "\"FILE_NAME\" TEXT);"); // 16: fileName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(1, mid);
        }
        stmt.bindString(2, entity.getSid());
        stmt.bindString(3, entity.getSessionNick());
 
        String sessionHead = entity.getSessionHead();
        if (sessionHead != null) {
            stmt.bindString(4, sessionHead);
        }
        stmt.bindString(5, entity.getSenderUid());
        stmt.bindString(6, entity.getSenderNick());
 
        String senderHead = entity.getSenderHead();
        if (senderHead != null) {
            stmt.bindString(7, senderHead);
        }
        stmt.bindLong(8, entity.getSessionType());
        stmt.bindLong(9, entity.getStatus());
        stmt.bindLong(10, entity.getTime());
        stmt.bindLong(11, entity.getType());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(12, text);
        }
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(13, thumb);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(14, pic);
        }
 
        String audio = entity.getAudio();
        if (audio != null) {
            stmt.bindString(15, audio);
        }
 
        String video = entity.getVideo();
        if (video != null) {
            stmt.bindString(16, video);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(17, fileName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(1, mid);
        }
        stmt.bindString(2, entity.getSid());
        stmt.bindString(3, entity.getSessionNick());
 
        String sessionHead = entity.getSessionHead();
        if (sessionHead != null) {
            stmt.bindString(4, sessionHead);
        }
        stmt.bindString(5, entity.getSenderUid());
        stmt.bindString(6, entity.getSenderNick());
 
        String senderHead = entity.getSenderHead();
        if (senderHead != null) {
            stmt.bindString(7, senderHead);
        }
        stmt.bindLong(8, entity.getSessionType());
        stmt.bindLong(9, entity.getStatus());
        stmt.bindLong(10, entity.getTime());
        stmt.bindLong(11, entity.getType());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(12, text);
        }
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(13, thumb);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(14, pic);
        }
 
        String audio = entity.getAudio();
        if (audio != null) {
            stmt.bindString(15, audio);
        }
 
        String video = entity.getVideo();
        if (video != null) {
            stmt.bindString(16, video);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(17, fileName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // mid
            cursor.getString(offset + 1), // sid
            cursor.getString(offset + 2), // sessionNick
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sessionHead
            cursor.getString(offset + 4), // senderUid
            cursor.getString(offset + 5), // senderNick
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // senderHead
            (byte) cursor.getShort(offset + 7), // sessionType
            (byte) cursor.getShort(offset + 8), // status
            cursor.getLong(offset + 9), // time
            (byte) cursor.getShort(offset + 10), // type
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // text
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // thumb
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // pic
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // audio
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // video
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // fileName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setMid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSid(cursor.getString(offset + 1));
        entity.setSessionNick(cursor.getString(offset + 2));
        entity.setSessionHead(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSenderUid(cursor.getString(offset + 4));
        entity.setSenderNick(cursor.getString(offset + 5));
        entity.setSenderHead(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSessionType((byte) cursor.getShort(offset + 7));
        entity.setStatus((byte) cursor.getShort(offset + 8));
        entity.setTime(cursor.getLong(offset + 9));
        entity.setType((byte) cursor.getShort(offset + 10));
        entity.setText(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setThumb(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPic(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAudio(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setVideo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFileName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Message entity, long rowId) {
        return entity.getMid();
    }
    
    @Override
    public String getKey(Message entity) {
        if(entity != null) {
            return entity.getMid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Message entity) {
        return entity.getMid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
