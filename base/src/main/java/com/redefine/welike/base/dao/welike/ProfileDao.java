package com.redefine.welike.base.dao.welike;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROFILE".
*/
public class ProfileDao extends AbstractDao<Profile, String> {

    public static final String TABLENAME = "PROFILE";

    /**
     * Properties of entity Profile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, String.class, "uid", true, "UID");
        public final static Property Nick = new Property(1, String.class, "nick", false, "NICK");
        public final static Property Head = new Property(2, String.class, "head", false, "HEAD");
        public final static Property Atoken = new Property(3, String.class, "atoken", false, "ATOKEN");
        public final static Property Ttype = new Property(4, String.class, "ttype", false, "TTYPE");
        public final static Property Rtoken = new Property(5, String.class, "rtoken", false, "RTOKEN");
        public final static Property Expired = new Property(6, String.class, "expired", false, "EXPIRED");
        public final static Property Introduction = new Property(7, String.class, "introduction", false, "INTRODUCTION");
        public final static Property Sex = new Property(8, Byte.class, "sex", false, "SEX");
        public final static Property PostsCount = new Property(9, Integer.class, "postsCount", false, "POSTS_COUNT");
        public final static Property FollowingCount = new Property(10, Integer.class, "followingCount", false, "FOLLOWING_COUNT");
        public final static Property FollowerCount = new Property(11, Integer.class, "followerCount", false, "FOLLOWER_COUNT");
        public final static Property LikedMyPostsCount = new Property(12, Long.class, "likedMyPostsCount", false, "LIKED_MY_POSTS_COUNT");
        public final static Property MyLikedPostsCount = new Property(13, Long.class, "myLikedPostsCount", false, "MY_LIKED_POSTS_COUNT");
        public final static Property CompleteLevel = new Property(14, int.class, "completeLevel", false, "COMPLETE_LEVEL");
        public final static Property Login = new Property(15, boolean.class, "login", false, "LOGIN");
        public final static Property Vip = new Property(16, Integer.class, "vip", false, "VIP");
        public final static Property Intrests = new Property(17, String.class, "intrests", false, "INTRESTS");
        public final static Property Status = new Property(18, Integer.class, "status", false, "STATUS");
    }


    public ProfileDao(DaoConfig config) {
        super(config);
    }
    
    public ProfileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROFILE\" (" + //
                "\"UID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uid
                "\"NICK\" TEXT," + // 1: nick
                "\"HEAD\" TEXT," + // 2: head
                "\"ATOKEN\" TEXT NOT NULL ," + // 3: atoken
                "\"TTYPE\" TEXT NOT NULL ," + // 4: ttype
                "\"RTOKEN\" TEXT NOT NULL ," + // 5: rtoken
                "\"EXPIRED\" TEXT NOT NULL ," + // 6: expired
                "\"INTRODUCTION\" TEXT," + // 7: introduction
                "\"SEX\" INTEGER," + // 8: sex
                "\"POSTS_COUNT\" INTEGER," + // 9: postsCount
                "\"FOLLOWING_COUNT\" INTEGER," + // 10: followingCount
                "\"FOLLOWER_COUNT\" INTEGER," + // 11: followerCount
                "\"LIKED_MY_POSTS_COUNT\" INTEGER," + // 12: likedMyPostsCount
                "\"MY_LIKED_POSTS_COUNT\" INTEGER," + // 13: myLikedPostsCount
                "\"COMPLETE_LEVEL\" INTEGER NOT NULL ," + // 14: completeLevel
                "\"LOGIN\" INTEGER NOT NULL ," + // 15: login
                "\"VIP\" INTEGER," + // 16: vip
                "\"INTRESTS\" TEXT," + // 17: intrests
                "\"STATUS\" INTEGER);"); // 18: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROFILE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Profile entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUid());
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(2, nick);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(3, head);
        }
        stmt.bindString(4, entity.getAtoken());
        stmt.bindString(5, entity.getTtype());
        stmt.bindString(6, entity.getRtoken());
        stmt.bindString(7, entity.getExpired());
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(8, introduction);
        }
 
        Byte sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(9, sex);
        }
 
        Integer postsCount = entity.getPostsCount();
        if (postsCount != null) {
            stmt.bindLong(10, postsCount);
        }
 
        Integer followingCount = entity.getFollowingCount();
        if (followingCount != null) {
            stmt.bindLong(11, followingCount);
        }
 
        Integer followerCount = entity.getFollowerCount();
        if (followerCount != null) {
            stmt.bindLong(12, followerCount);
        }
 
        Long likedMyPostsCount = entity.getLikedMyPostsCount();
        if (likedMyPostsCount != null) {
            stmt.bindLong(13, likedMyPostsCount);
        }
 
        Long myLikedPostsCount = entity.getMyLikedPostsCount();
        if (myLikedPostsCount != null) {
            stmt.bindLong(14, myLikedPostsCount);
        }
        stmt.bindLong(15, entity.getCompleteLevel());
        stmt.bindLong(16, entity.getLogin() ? 1L: 0L);
 
        Integer vip = entity.getVip();
        if (vip != null) {
            stmt.bindLong(17, vip);
        }
 
        String intrests = entity.getIntrests();
        if (intrests != null) {
            stmt.bindString(18, intrests);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(19, status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Profile entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUid());
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(2, nick);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(3, head);
        }
        stmt.bindString(4, entity.getAtoken());
        stmt.bindString(5, entity.getTtype());
        stmt.bindString(6, entity.getRtoken());
        stmt.bindString(7, entity.getExpired());
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(8, introduction);
        }
 
        Byte sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(9, sex);
        }
 
        Integer postsCount = entity.getPostsCount();
        if (postsCount != null) {
            stmt.bindLong(10, postsCount);
        }
 
        Integer followingCount = entity.getFollowingCount();
        if (followingCount != null) {
            stmt.bindLong(11, followingCount);
        }
 
        Integer followerCount = entity.getFollowerCount();
        if (followerCount != null) {
            stmt.bindLong(12, followerCount);
        }
 
        Long likedMyPostsCount = entity.getLikedMyPostsCount();
        if (likedMyPostsCount != null) {
            stmt.bindLong(13, likedMyPostsCount);
        }
 
        Long myLikedPostsCount = entity.getMyLikedPostsCount();
        if (myLikedPostsCount != null) {
            stmt.bindLong(14, myLikedPostsCount);
        }
        stmt.bindLong(15, entity.getCompleteLevel());
        stmt.bindLong(16, entity.getLogin() ? 1L: 0L);
 
        Integer vip = entity.getVip();
        if (vip != null) {
            stmt.bindLong(17, vip);
        }
 
        String intrests = entity.getIntrests();
        if (intrests != null) {
            stmt.bindString(18, intrests);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(19, status);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public Profile readEntity(Cursor cursor, int offset) {
        Profile entity = new Profile( //
            cursor.getString(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nick
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // head
            cursor.getString(offset + 3), // atoken
            cursor.getString(offset + 4), // ttype
            cursor.getString(offset + 5), // rtoken
            cursor.getString(offset + 6), // expired
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // introduction
            cursor.isNull(offset + 8) ? null : (byte) cursor.getShort(offset + 8), // sex
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // postsCount
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // followingCount
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // followerCount
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // likedMyPostsCount
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // myLikedPostsCount
            cursor.getInt(offset + 14), // completeLevel
            cursor.getShort(offset + 15) != 0, // login
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // vip
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // intrests
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Profile entity, int offset) {
        entity.setUid(cursor.getString(offset + 0));
        entity.setNick(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHead(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAtoken(cursor.getString(offset + 3));
        entity.setTtype(cursor.getString(offset + 4));
        entity.setRtoken(cursor.getString(offset + 5));
        entity.setExpired(cursor.getString(offset + 6));
        entity.setIntroduction(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSex(cursor.isNull(offset + 8) ? null : (byte) cursor.getShort(offset + 8));
        entity.setPostsCount(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setFollowingCount(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setFollowerCount(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setLikedMyPostsCount(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setMyLikedPostsCount(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setCompleteLevel(cursor.getInt(offset + 14));
        entity.setLogin(cursor.getShort(offset + 15) != 0);
        entity.setVip(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setIntrests(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setStatus(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Profile entity, long rowId) {
        return entity.getUid();
    }
    
    @Override
    public String getKey(Profile entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Profile entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
