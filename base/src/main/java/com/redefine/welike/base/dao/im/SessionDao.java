package com.redefine.welike.base.dao.im;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SESSION".
*/
public class SessionDao extends AbstractDao<Session, String> {

    public static final String TABLENAME = "SESSION";

    /**
     * Properties of entity Session.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Sid = new Property(0, String.class, "sid", true, "SID");
        public final static Property SessionNick = new Property(1, String.class, "sessionNick", false, "SESSION_NICK");
        public final static Property SessionHead = new Property(2, String.class, "sessionHead", false, "SESSION_HEAD");
        public final static Property SingleUid = new Property(3, String.class, "singleUid", false, "SINGLE_UID");
        public final static Property MsgType = new Property(4, Byte.class, "msgType", false, "MSG_TYPE");
        public final static Property EnableChat = new Property(5, Boolean.class, "enableChat", false, "ENABLE_CHAT");
        public final static Property VisableChat = new Property(6, Boolean.class, "visableChat", false, "VISABLE_CHAT");
        public final static Property IsGreet = new Property(7, Boolean.class, "isGreet", false, "IS_GREET");
        public final static Property SessionType = new Property(8, byte.class, "sessionType", false, "SESSION_TYPE");
        public final static Property Time = new Property(9, long.class, "time", false, "TIME");
        public final static Property UnreadCount = new Property(10, int.class, "unreadCount", false, "UNREAD_COUNT");
        public final static Property Content = new Property(11, String.class, "content", false, "CONTENT");
    }


    public SessionDao(DaoConfig config) {
        super(config);
    }
    
    public SessionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SESSION\" (" + //
                "\"SID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: sid
                "\"SESSION_NICK\" TEXT NOT NULL ," + // 1: sessionNick
                "\"SESSION_HEAD\" TEXT," + // 2: sessionHead
                "\"SINGLE_UID\" TEXT," + // 3: singleUid
                "\"MSG_TYPE\" INTEGER," + // 4: msgType
                "\"ENABLE_CHAT\" INTEGER," + // 5: enableChat
                "\"VISABLE_CHAT\" INTEGER," + // 6: visableChat
                "\"IS_GREET\" INTEGER," + // 7: isGreet
                "\"SESSION_TYPE\" INTEGER NOT NULL ," + // 8: sessionType
                "\"TIME\" INTEGER NOT NULL ," + // 9: time
                "\"UNREAD_COUNT\" INTEGER NOT NULL ," + // 10: unreadCount
                "\"CONTENT\" TEXT);"); // 11: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SESSION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Session entity) {
        stmt.clearBindings();
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(1, sid);
        }
        stmt.bindString(2, entity.getSessionNick());
 
        String sessionHead = entity.getSessionHead();
        if (sessionHead != null) {
            stmt.bindString(3, sessionHead);
        }
 
        String singleUid = entity.getSingleUid();
        if (singleUid != null) {
            stmt.bindString(4, singleUid);
        }
 
        Byte msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindLong(5, msgType);
        }
 
        Boolean enableChat = entity.getEnableChat();
        if (enableChat != null) {
            stmt.bindLong(6, enableChat ? 1L: 0L);
        }
 
        Boolean visableChat = entity.getVisableChat();
        if (visableChat != null) {
            stmt.bindLong(7, visableChat ? 1L: 0L);
        }
 
        Boolean isGreet = entity.getIsGreet();
        if (isGreet != null) {
            stmt.bindLong(8, isGreet ? 1L: 0L);
        }
        stmt.bindLong(9, entity.getSessionType());
        stmt.bindLong(10, entity.getTime());
        stmt.bindLong(11, entity.getUnreadCount());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(12, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Session entity) {
        stmt.clearBindings();
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(1, sid);
        }
        stmt.bindString(2, entity.getSessionNick());
 
        String sessionHead = entity.getSessionHead();
        if (sessionHead != null) {
            stmt.bindString(3, sessionHead);
        }
 
        String singleUid = entity.getSingleUid();
        if (singleUid != null) {
            stmt.bindString(4, singleUid);
        }
 
        Byte msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindLong(5, msgType);
        }
 
        Boolean enableChat = entity.getEnableChat();
        if (enableChat != null) {
            stmt.bindLong(6, enableChat ? 1L: 0L);
        }
 
        Boolean visableChat = entity.getVisableChat();
        if (visableChat != null) {
            stmt.bindLong(7, visableChat ? 1L: 0L);
        }
 
        Boolean isGreet = entity.getIsGreet();
        if (isGreet != null) {
            stmt.bindLong(8, isGreet ? 1L: 0L);
        }
        stmt.bindLong(9, entity.getSessionType());
        stmt.bindLong(10, entity.getTime());
        stmt.bindLong(11, entity.getUnreadCount());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(12, content);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Session readEntity(Cursor cursor, int offset) {
        Session entity = new Session( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sid
            cursor.getString(offset + 1), // sessionNick
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sessionHead
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // singleUid
            cursor.isNull(offset + 4) ? null : (byte) cursor.getShort(offset + 4), // msgType
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // enableChat
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // visableChat
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isGreet
            (byte) cursor.getShort(offset + 8), // sessionType
            cursor.getLong(offset + 9), // time
            cursor.getInt(offset + 10), // unreadCount
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Session entity, int offset) {
        entity.setSid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSessionNick(cursor.getString(offset + 1));
        entity.setSessionHead(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSingleUid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMsgType(cursor.isNull(offset + 4) ? null : (byte) cursor.getShort(offset + 4));
        entity.setEnableChat(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setVisableChat(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setIsGreet(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setSessionType((byte) cursor.getShort(offset + 8));
        entity.setTime(cursor.getLong(offset + 9));
        entity.setUnreadCount(cursor.getInt(offset + 10));
        entity.setContent(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Session entity, long rowId) {
        return entity.getSid();
    }
    
    @Override
    public String getKey(Session entity) {
        if(entity != null) {
            return entity.getSid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Session entity) {
        return entity.getSid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
